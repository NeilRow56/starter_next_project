generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
 ADMIN
 USER
}

model User {
 id              String @id @default(auto()) @map("_id") @db.ObjectId
 firstName       String
 lastName        String 
 bio             String?
 website         String? 
 gender          String?
 email           String   @unique 
 active          Boolean  @default(false)
 emailVerified   DateTime?
 imageUrl        String? 
 password        String
 role            UserRole @default(USER)
 colorScheme     String       @default("theme-orange")
 currency         String         @default("GBP")
 subscription    Subscription []
 createdAt       DateTime @default(now())
 updatedAt       DateTime @updatedAt
userSettings    UserSettings[]
categories      Category[]
transactions    Transaction[]
monthHistory    MonthHistory[]
yearHistory     YearHistory[]
accounts        Account[]
sessions        Session[]
}

model Subscription {
  stripeSubscriptionId String @id @default(auto()) @map("_id") @db.ObjectId
  interval            String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId               String   @db.ObjectId
}

model UserSettings {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  currency       String  @unique 
  user           User      @relation(fields: [userId], references: [id])
  userId String    @db.ObjectId
}

model Transaction {
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    amount        Float
    description   String  
    date          DateTime        
    type          String      @default("income")
    category      String
    categoryIcon  String
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    
}

model Category {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    name      String   @unique
    icon      String   
    type      String   @default("income")
    createdAt DateTime @default(now())
    userId String @db.ObjectId
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MonthHistory {
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    day           Int
    month         Int
    year          Int
    income        Float
    expense       Float
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId
}

model YearHistory {
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    month         Int
    year          Int
    income        Int
    expense       Int
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String  @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 userId             String   @db.ObjectId
 type               String
 provider           String
 providerAccountId  String
 refresh_token      String?  @db.String
 access_token       String?  @db.String
 expires_at         Int?
 token_type         String?
 scope              String?
 id_token           String?  @db.String
 session_state      String?
 user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 @@unique([provider, providerAccountId])
}






